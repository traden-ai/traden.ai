syntax = "proto3";
package Simulation;

enum Status {
  OK = 0;
  NOK = 1;
  // INTERVAL_NOT_AVAILABLE = 2;
}

// ping

message CtrlPingRequest {
  string input = 1;
}

message CtrlPingResponse {
	string output = 1;
}

// simulation

message StartSimulationRequest {
  double balance = 2;
  repeated string tickers = 3;
  string initial_date = 4;
  string end_date = 5;
  repeated string models = 6;
  float transaction_fee = 7;
  int32 number_executions = 8;
}

message ModelResults {
  string model = 1;
  double nominal_profit = 2;
  double percentage_profit = 3;
  double yearly_percentage_profit = 4;
  double operating_time_percentage = 5;
}

message TickerResults {
  string ticker = 1;
  double percentage_profit = 3;
}

message StartSimulationResponse {
  int32 simulation_id = 1;
  repeated ModelResults model_results = 2;
  repeated TickerResults ticker_results = 3;
  Status status = 4;
}

// simulation graphs

message DataPoint {
  int32 time = 1;
  double capital = 2;
}

message Graph {
  string name = 1;
  repeated DataPoint point = 2;
}

message SimulationGraphRequest{
  int32 simulation_id = 1;
}

message SimulationGraphResponse{
  repeated Graph graphs = 1;
}

// simulation logs

message Log {
  enum Action {
    BUY = 0;
    SELL = 1;
  }
  Action action = 1;
  float shares = 2;
  float price_per_share = 3;
  string date = 4;
}

message ModelExecutionLogs {
  int32 execution_no = 1;
  repeated Log logs = 2;
}

message ModelLogs {
  string model = 1;
  repeated ModelExecutionLogs execution_logs = 2;
}

message SimulationLogsRequest{
  int32 id = 1;
}

message SimulationLogsResponse{
  repeated ModelLogs model_logs = 1;
}

// simulation termination

message CloseSimulationRequest{
  int32 simulation_id = 1;
}

message CloseSimulationResponse{
  Status status = 1;
}

service SimulationService {
  rpc ctrl_ping(CtrlPingRequest) returns (CtrlPingResponse);
  rpc start_simulation(StartSimulationRequest) returns (StartSimulationResponse);
  rpc simulation_graph(SimulationGraphRequest) returns (SimulationGraphResponse);
  rpc simulation_logs(SimulationLogsRequest) returns (SimulationLogsResponse);
  rpc close_simulation(CloseSimulationRequest) returns (CloseSimulationResponse);
}